We have decided to use Python and Django for our web app. We thought this would be a good choice for us because most of us have 
some level of experience writing Python. We wanted to use a framework that is widely used with Python for web development, 
as we knew it would be much easier to find robust documentation and an active, widespread community of developers to use as a 
resource along the way. This is especially important for our team as we are beginners in web dev. Keeping this in mind, we then 
considered whether it would make more sense to use Flask or Django. We made the decision to go with Django because it provides 
more functionality right from the get-go, something that is valuable to us knowing that this is a time-sensitive project. 
Django also includes security measures that we as beginners might not have known to implement otherwise. Though there is 
certainly a non-negligible learning curve that comes with Django, we were curious to learn this popular (and widely used) 
framework and interested to put the time in to do so.

We decided not to use Node.js. Although, Node.js offers high performance, wide selection of great libraries, and a huge user 
community. Particularly, Node.js asynchronous programming was one of several reasons on why we chose not to use Node.js. In 
Node.js your are constantly being exposed to the asynchronous nature of IO. Compared to Django[python-based], which is 
programmed synchronously. Another reason for not choosing Node.js was due to Node.js working with single threads, it performs 
poorly in CPU intensive conditions. Whereas, Django is highly scalable. The caching of applications is quite easy and can be 
done using tools like MemCache. Overall, this led to our decision to use Django over Node.js.